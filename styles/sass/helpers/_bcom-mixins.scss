// *
// *  Consolidated bcom mixins
// *
// *  Contains any and all mixins that are used in more than one file
// *  This file should not produce any actual CSS
// *
// *  cmd+f for '***' to see source files
// *

// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
// *** Source: _mixins-base.scss
// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

//  Mixins                       

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

// Flexible Grid Proportion Calculator
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Figuring out the ideal percentage of a responsive container.
// Based on the equation target / context = result.
// Math usually based on values takne from a static design.
// WHY: Math is easier this way.
// REF: http://www.lukew.com/ff/entry.asp?1167
// USE: width: resp(300px);
@function resp($target, $context: 960){
  @return percentage($target / $context); 
}

// Em Calculator
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Simply writing ems while allowing you to think in more straightforward px values
// WHY: I don't think in ems. Do you?
// NOTE: Ems calculated using the document base; override by providing optional second value
// REF: http://bourbon.io/docs/#px-to-em
// USE: em(12);

@function em($pxval, $base: 13) {
  @if not unitless($pxval) {
      $pxval: strip-units($pxval);
  }
  @if not unitless($base) {
      $base: strip-units($base);
  }
  @return #{($pxval/$base)}em;
}

// Strip Units
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Removing the unit from a number and returning the raw value
// REF: https://github.com/nex3/sass/issues/533
// REF: http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass/12335841#12335841
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
 }

// Responsive Images
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Setting the default properties of a responsive image
// WHY: It's repetitive. Saves re-writing of multiple rules.
// USE: @include resp-img;
@mixin resp-img {
  width: 100%;
  max-width: 100%; 
}

// Content
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Filling psuedo-clases :before, :after with blank content
// WHY: Psuedo classes won't appear unless you fill them with content.
// This mixin includes the difficult-to-recall cross-browser character code for "blank". 
// USE: @include content;
@mixin content($content: \0020) {
  content: "#{$content}";
}

// Psuedo
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Quickly pasting three essential and commonly used properties that make psuedo classes work 
// WHY: Easier than remembering and writing each time. Should cut down on mistakes/debugging.
// USE: @include pseudo;
@mixin psuedo($coordinates: n n n n) {
  @include content;
  display: block;
  @include absolute($coordinates); 
}

// Transitions
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Quick application of transition properties
// WHY: This are our most common defaults
// USE: @include trans;
// USE: @include trans(.1s, opacity, linear);
@mixin trans($trans-time: .25s, $trans-property: all, $trans-function: cubic-bezier(0.49, 0.37, 0.445, 0.715)) {
  -webkit-transition: #{$trans-property}, #{$trans-time}, #{$trans-function} false;
  -moz-transition: #{$trans-property}, #{$trans-time}, #{$trans-function} false;
  -o-transition: #{$trans-property}, #{$trans-time}, #{$trans-function} false;
  transition: #{$trans-property}, #{$trans-time}, #{$trans-function} false;
}

// User Select
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Making text unselectable by the user
// WHY: Sometimes the cursor highlights text on clickable elements (in particular buttons),
// which can confuse the user intent. This is especially true on touch interfaces. 
// This mixin is an easy cross-browser way to repress text selection.
// USE: @include user-select;
@mixin user-select($user-select: none) {
  -webkit-user-select: #{$user-select};
  -khtml-user-select: #{$user-select};
  -moz-user-select: #{$user-select};
  -ms-user-select: #{$user-select};
  -o-user-select: #{$user-select};
  user-select: #{$user-select};
}


// Reset Clearfix
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Removing pie-clearfix from an element after it's been applied
// WHY: Hard to remember attribute combo. Helpful in responsive layouts.
// USE: @include reset-clearfix;
@mixin reset-clearfix {
  &:after {
    display: initial;
    clear: none;
  }
}


// Size
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Applying width & height in a single declaration
// WHY: Faster. Less typing. Easier to deal with squares.
// NOTE: If you supply a single value, the result is a square  
// REF: http://bourbon.io/docs/#size
// USE: @include size(50px 100px);
 
@mixin size($size) {
  @if length($size) == 1 {
    @if $size == auto {
      width:  $size;
      height: $size;
    }
 
    @else if unitless($size) {
      width:  $size + px;
      height: $size + px;
    }
 
    @else if not(unitless($size)) {
      width:  $size;
      height: $size;
    }
  }
 
  // Width x Height
  @if length($size) == 2 {
    $width:  nth($size, 1);
    $height: nth($size, 2);
 
    @if $width == auto {
      width: $width;
    }
    @else if not(unitless($width)) {
      width: $width;
    }
    @else if unitless($width) {
      width: $width + px;
    }
 
    @if $height == auto {
      height: $height;
    }
    @else if not(unitless($height)) {
      height: $height;
    }
    @else if unitless($height) {
      height: $height + px;
    }
  }
}


// Tint & Shade 
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: More reliable color manipulation
// WHY: Built-in SASS color functions can be limited and unpredictable
// This functions more like swatch tints in Adobe programs
// HOW: Adds a percentage of black or white to the base color
// REF: http://bourbon.io/docs/#tint-shade
// USE: @include tint(red, 40%);

// Add percentage of white to a color
@function tint($color, $percent){
  @return mix(white, $color, $percent);
}

// Add percentage of black to a color
@function shade($color, $percent){
  @return mix(black, $color, $percent);
}

// Animation Mixin
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Writing animation properties and having them work everywhere
// WHY: Ensure compability. It's time-consuming to write cross-browser.
// USE: @include animation(fadedown 4s ease);
// REF: http://www.w3.org/TR/css3-animations/#the-animation-name-property-

// NOTE: Each of these mixins support comma separated lists of values, 
// which allows different transitions for individual properties 
// to be described in a single style rule. Each value in the list 
// corresponds to the value at that same position in the other properties.

// Official animation shorthand property.
@mixin animation ($animations...) {
  @include prefixer(animation, $animations, webkit moz spec);
}

// Individual Animation Properties
@mixin animation-name ($names...) {
  @include prefixer(animation-name, $names, webkit moz spec);
}


@mixin animation-duration ($times...) {
  @include prefixer(animation-duration, $times, webkit moz spec);
}


@mixin animation-timing-function ($motions...) {
// ease | linear | ease-in | ease-out | ease-in-out
  @include prefixer(animation-timing-function, $motions, webkit moz spec);
}


@mixin animation-iteration-count ($values...) {
// infinite | <number>
  @include prefixer(animation-iteration-count, $values, webkit moz spec);
}


@mixin animation-direction ($directions...) {
// normal | alternate
  @include prefixer(animation-direction, $directions, webkit moz spec);
}


@mixin animation-play-state ($states...) {
// running | paused
  @include prefixer(animation-play-state, $states, webkit moz spec);
}


@mixin animation-delay ($times...) {
  @include prefixer(animation-delay, $times, webkit moz spec);
}


@mixin animation-fill-mode ($modes...) {
// none | forwards | backwards | both
  @include prefixer(animation-fill-mode, $modes, webkit moz spec);
}

@mixin keyframes($name) {
  @-webkit-keyframes $name {
    @content;
  }
  @-moz-keyframes $name {
    @content;
  }
  @keyframes $name {
    @content;
  }
}

// Input Defaults 
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Zero'ing out the style on an input field (text input, radio button, etc)
// WHY: It's a lot to write and remember all these characteristics
// USE: @include input-default;
@mixin input-default {
  border: 0;
  background-color: transparent;
  box-shadow: none;
  border-radius: 0;
  -webkit-appearance: none;
  &:focus {
    outline: 0;
  }
}


// Triangles
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Quickly making CSS triangles
// WHY: It's annoying to remember how these attribute work. 
// Plus CSS triangles are really flexible and awesome.
// USE: @include triangle(right, 6px, #000, .68);
@mixin triangle($tri-orientation: down, $tri-width: 3px, $tri-color: #666, $mult:1) {

  -moz-transform: rotate(0.1deg);
  -ms-transform: rotate(0.1deg);
  -webkit-transform: rotate(0.1deg);
  transform: rotate(0.1deg);
  
  @if $tri-orientation == "up" or $tri-orientation == "top" {
    border-left: $tri-width*$mult solid transparent;
    border-right: $tri-width*$mult solid transparent;
    border-bottom: $tri-width solid $tri-color;
  }

  @if $tri-orientation == "down" or $tri-orientation == "bottom" {
    border-left: $tri-width*$mult solid transparent;
    border-right: $tri-width*$mult solid transparent;
    border-top: $tri-width solid $tri-color;
  }

  @if $tri-orientation == "left" {
    border-top: $tri-width*$mult solid transparent;
    border-bottom: $tri-width*$mult solid transparent;
    border-right: $tri-width solid $tri-color;
    border-left:0px solid transparent;
  }

  @if $tri-orientation == "right" {
    border-top: $tri-width*$mult solid transparent;
    border-bottom: $tri-width*$mult solid transparent;
    border-left: $tri-width solid $tri-color;
    border-right:0px solid transparent;
  }
}

// Absolute Positioning
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Quickly setting the top, right, left, and bottom positions of an absolutely positioned element
// WHY: It's verbose to write everytime in CSS
// USE: @include absolute(0 0 10px 0);
@mixin absolute($coordinates: n n n n) {

  $top: nth($coordinates, 1);
  $right: nth($coordinates, 2);
  $bottom: nth($coordinates, 3);
  $left: nth($coordinates, 4);

  position: absolute;

  @if $top == auto or $top == a {
    top: auto;
  }
  // Print nothing if we write an "n" or "none"
  @else if $top == n or $top == none {
  }
  @else {
    top: $top;
  }

  @if $right == auto or $right == a {
    right: auto;
  }
  // Print nothing if we write an "n" or "none"
  @else if $right == n or $right == none {
  }
  @else {
    right: $right;
  }

  @if $bottom == auto or $bottom == a {
    bottom: auto;
  }
  // Print nothing if we write an "n" or "none"
  @else if $bottom == n or $bottom == none{
  }
  @else {
    bottom: $bottom;
  }

  @if $left == auto or $left == a {
    left: auto;
  }
  // Print nothing if we write an "n" or "none"
  @else if $left == n or $left == none {
  }
  @else {
    left: $left;
  }
}

@mixin unabsolute {
  position: static;
  top: auto;
  right: auto;
  bottom: auto;
  left: auto;
}

// Ellipsis
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Truncating text with an ellipsis the CSS way
// WHY: It's hard to recall using this combination of attributes
// USE: @include ellipsis;
@mixin ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}


// Placeholder Text
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Styling placeholder text color states (default, hover, focus) 
// WHY: Provides a shortcut for writing the code, which is necessarily long
// because selectors cannot be combined. Also a cross-browser solution.
// USE: @include placholder(#999, #999, #222);
@mixin placeholder-state($default: inherit, $hover: $default, $focus: $default){
  // You have to declare these separately in order to work
  &::-webkit-input-placeholder {
      color: $default;
  }
  &:-moz-placeholder {
      color: $default;
  }
  &:hover::-webkit-input-placeholder {
      color: $hover;
  }
  &:hover:-moz-placeholder {
      color: $hover;
  }
  &:focus::-webkit-input-placeholder {
      color: $focus;
  }
  &:focus:-moz-placeholder {
      color: $focus;
  }
}
  

// SVG Fallback Pattern
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Setting PNG fallbacks for SVG background images
// WHY: Saves time and typing and is guaranteed to work across devices 
// NOTE 1: You still need to set the display (inline-block or block) 
// and a height/width for the container
// NOTE 2: "image-url" is a helper that automatically creates a relative link to the _img folder
// from wherever it's called. This function is built-in to Compass. It's rare that you'll need
// change the base folder (_img) but it can be done in the config.rb file in the root 
// REF: http://compass-style.org/reference/compass/helpers/urls
// USE: @include svg(imageName);

@mixin svg($image, $cover: true) {
  // Variables
  $svg: $svg-path + $image + ".svg";
  $png: $svg-path + $image + ".png";
  $ms-filter: "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='"+ $png +"', sizingMethod='scale')";

  // Universal properties
  background-position: 50% 50%;
  background-repeat: no-repeat;

  // Fallback pattern
  .no-svg & {
    //background-image: url($png); This is the original line for this snippet. background-image has a hard url as a placeholder -cgo
    background-image: url(http://devedit.boston.com/real-estate/images/vote-down.png);
   //TODO: need to fix this, for some reason in IE8 this is causing double images to load on top of one another because for some reason the filter is loading the image and then scalling that.
     //    @if $cover == true {
    //  // Makes sure that image scales if necessary, works for IE9
    //  @include background-size(cover);
    //  filter: $ms-filter;
    //  -ms-filter: $ms-filter;
    // }
  }
  .svg & {
    background-image: url(http://devedit.boston.com/real-estate/images/vote-down.svg);
    //background-image: url($svg); This is the original line for this snippet. background-image has a hard url as a placeholder -cgo
  }
} // svg


// RGBA Background Fallback Pattern
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Setting safe fallbacks for RGBA background colors (black & white only)
// WHY: Saves time and typing; guaranteed to work across devices 
// USE: @include rgba-bg(black, .5);

@mixin rgba-bg($color: white, $alpha: .1) {
  // Strip units from alpha in case user tries to pass a percentage ...
  $alpha: strip-units($alpha);
  @if $alpha > 1 {
    $alpha: $alpha * .01;
  }

  // Turn decimal into whole number for use with fallback
  $a-integer: $alpha * 100;

  // Set fallback background image, including path 
  $fallback-bg: '#{$rgba-bg-path}#{$color}-#{$a-integer}' + '.png';

  @if $color == transparent {
    background-color: transparent;
    .no-rgba & {
      background-color: transparent;
    }
  }
  @else {
    background-color: $color;

    @if $color == white or $color == #fff or $color == #ffffff  {
      background-color: rgba(255,255,255,$alpha);
    }
    @else {
      background-color: rgba(0,0,0,$alpha);
    }

    .no-rgba & {
      background: transparent image-url(#{$fallback-bg}) 50% 50% repeat;
    }
  }
}


// FOUT: Flash of Unstyled Type
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Making text appear on the page only after webfonts have loaded.
// Doesn't work without the hooks provided by using Google Webfont Loader (see: snips.html).
// WHY: Who wants to write this same six lines of code over and over?
// USE: @include fout;
@mixin fout {
  .wf-loading & {
    visibility: hidden;
  }
  .wf-active &,
  .wf-inactive & {
    visibility: visible;
  } 
}

// Retina Background Images
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Serving larger background images when the user agent has a retina display 
// WHY: Because it's a long list of hard-to-remember proprietary code
// REF: Idea originates here: http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss
// USE: @include retina(image.png, 8px, 10px);

@mixin retina($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.1),
         (-o-min-device-pixel-ratio: 2.1/2),
         (-webkit-min-device-pixel-ratio: 1.1),
         (min-device-pixel-ratio: 1.1),
         (min-resolution: 96dpi) {
    // on retina, use image that's scaled by 2
  background-image: $image;
  -moz-background-size: $width $height;
  -o-background-size: $width $height;
  -webkit-background-size: $width $height;
  background-size: $width $height;
  }
}


// Responsive Video
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Giving yourself a responsive video that maintains its aspect ratio 
// WHY: Annoying to remember/lookup
// REF: http://webdesignerwall.com/tutorials/css-elastic-videos
// USE: @include video;

@mixin video($aspect: wide) {

  @if $aspect == wide or $aspect == cinema or $aspect == 16/9 {
    $aspect: 56.25%;
  }
  @else if $aspect == tv or $aspect == 4/3 {
    $aspect: 75%;
  }

    position: relative;
    padding-bottom: $aspect;
    padding-top: 30px;
    height: 0;
    iframe,  
    object,  
    embed {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
  }
}

// Absolute Centering
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Centering (both horizontally & vertically) 
// absolutely positioned items
// WHY: This does the math for you
// USE: @include absolute-center(n 22px);
@mixin absolute-center($dimensions) {
  // If only one value is supplied, 
  // default to center the width
  @if length($dimensions) == 1 {
    $dimensions: $dimensions n;
  }

  $width: nth($dimensions, 1);
  $height: nth($dimensions, 2);

  position: absolute;

  @if $width != n {
    @if not(unitless($width)) {
      width: $width;
      margin-left: (-$width / 2);
    }
    @if unitless($width) {
      width: $width + px;
      margin-left: (-$width / 2) + px;
    }
    left: 50%;
  }

  @if $height != n {
    @if not(unitless($height)) {
      height: $height;
      margin-top: (-$height / 2);
    }
    @if unitless($height) {
      height: $height + px;
      margin-top: (-$height / 2) + px;
    }
    top: 50%;
  }
} // absolute-center

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
//
// Sprites  
//
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~


// Let Compass make Sprites for us
// http://compass-style.org/help/tutorials/spriting/
//@import "compass/utilities/sprites/base";

// Make a sprite from all the images in the "_img > sprite" folder
//$sprite-layout:horizontal;
//$sprite-sprite-dimensions:true;
//@import "sprite/*.png";
//@include all-sprite-sprites;

//
// Retina Sprites 
//

// UNCOMMENT TO ENABLE RETINA SPRITES
// Place all your retina images in retina folder

// Make a sprite from all the images in the "_img > retina" folder
// $retina-layout:horizontal;
// @import "retina/*.png";
// @include all-retina-sprites; 

// .sprite-sprite {
//  @include retina($retina-sprites, 8px, 10px);    
// }



// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
//
// Paul Irish HTML5 Helpers 
//
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

// Image replacement
@mixin ir { 
  display: block; 
  text-indent: -999em; 
  overflow: hidden; 
  background-repeat: no-repeat; 
  text-align: left; 
  direction: ltr; 
}

// Hide for both screenreaders and browsers
//   css-discuss.incutio.com/wiki/Screenreader_Visibility
@mixin hidden { 
  display: none; 
  visibility: hidden; 
} 

// Hide only visually, but have it available for screenreaders 
//   www.webaim.org/techniques/css/invisiblecontent/  &  j.mp/visuallyhidden
@mixin visuallyhidden { 
  position: absolute !important;
  clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px); 
}

// Extends the .visuallyhidden class to allow the element to be focusable when navigated to via the keyboard: drupal.org/node/897638
// .visuallyhidden.focusable:active,
// .visuallyhidden.focusable:focus { clip: auto; height: auto; margin: 0; overflow: visible; position: static; width: auto; }

// Hide visually and from screenreaders, but maintain layout
@mixin invisible { 
  visibility: hidden; 
}


// Rounded rectangle Mixin
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 
// We seem to be using alot of 'pill' buttons. This makes it ease!
// Just specify width and height of the button and viola, a pill button!
// If you want a to use a different border radius, just type it in after height

@mixin round-rect($width: 70px, $height:$width, $border-radius: pill) {
  width: $width;
  height: $height;
  @if $border-radius == "pill" {
    @if ($width > $height) {
        border-radius: ($height / 2);
    }
    @else {
        border-radius: ($width / 2);
    }
  }
  @else {
    border-radius: $border-radius;
  }
}

// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
// *** Source: _mixins.scss
// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

// The Media Query Mixin
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Write less verbose Media Queries with variables 
// or using straight figures (eg 320px)
// WHY: Faster to write. More flexible. Lets you write 
// media query variables on the fly.
// USE: @include mq(320px, 798px);
// USE: @include mq($tablet, $desktop);

@mixin mq($breakpoint-1, $breakpoint-2: 0) {
  @if $breakpoint-1 == "max" {
    @media (max-width:$breakpoint-2 - 1) { @content; }
  }

  @elseif unitless($breakpoint-2) {
    @media (min-width: $breakpoint-1) { @content; }
  } //single breakpoint

  @else {
    @media (min-width: $breakpoint-1) and (max-width:$breakpoint-2 - 1) { @content; }
  } //bracketed breakpoint
}

// Quick Border
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Consistently applying the double-border that 
// appears below each quick tease. Mixin allows you to
// use the default style above and below an element or 
// apply the full double line below a single element   
// WHY: So the style can be controlled in one place
// and we don't have to deal with the complexity
// USE: @include quick-border;

@mixin quick-border($style: normal) {
  @if $style == "top" {
    border-top: 1px solid #e0e0e0;
    box-shadow: 0 -2px #fff;
  }
  @else if $style == "undo" {
    border-bottom: 0;
    box-shadow: none;
  }
  @else {
    border-bottom: 1px solid #e0e0e0;
    box-shadow: 0 2px #fff;
  }
}


// Button Hover / Active states
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Applying background color for default / hover / active states for bcom buttons
// WHY: It's annoying to do this for every button
// USE: @include button-state(red, #fff);

@mixin button-state($button-color: $red, $button-txt-color: #fff, $button-shadow: shadow) {

  $hover-color: tint($button-color, 10%);
  $active-color: shade($button-color, 14%);
  $shadow-color: shade($button-color, 25%);

  color: $button-txt-color;
  background-color: $button-color;
  @include trans($trans-time);
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);

  &:hover {
    background-color: $hover-color;
  }
  &:active {
    background-color: $active-color;
    transition: none;
  }

  @if $button-shadow == "shadow" or $button-shadow == "shadow-on"{
      box-shadow: -1px -1px 0 $shadow-color inset;
  }
  @if $button-shadow == "no-shadow"{
      text-shadow: none;
    }
}




// Prefixer
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Easily applying range of vendor prefixes when rolling
// your own mixins. This comes straight from Bourbon.io 
// USE: @include prefixer(border-radius, $radii, webkit ms spec);

$prefix-for-webkit:    true !default;
$prefix-for-mozilla:   true !default;
$prefix-for-microsoft: true !default;
$prefix-for-opera:     true !default;
$prefix-for-spec:      true !default; // required for keyframe mixin

@mixin prefixer ($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      @if $prefix-for-webkit {
        -webkit-#{$property}: $value;
      }
    }
    @else if $prefix == moz {
      @if $prefix-for-mozilla {
        -moz-#{$property}: $value;
      }
    }
    @else if $prefix == ms {
      @if $prefix-for-microsoft {
        -ms-#{$property}: $value;
      }
    }
    @else if $prefix == o {
      @if $prefix-for-opera {
        -o-#{$property}: $value;
      }
    }
    @else if $prefix == spec {
      @if $prefix-for-spec {
        #{$property}: $value;
      }
    }
    @else  {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

@mixin disable-prefix-for-all() {
  $prefix-for-webkit:    false;
  $prefix-for-mozilla:   false;
  $prefix-for-microsoft: false;
  $prefix-for-opera:     false;
  $prefix-for-spec:      false;
}


// Placeholder
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Applying placeholder and making it cross-browser
// compatible. This comes straight from Bourbon.io 
// USE: Nested inside of another selector
// USE: @include pholder { color: red };

$placeholders: '-webkit-input-placeholder',
               '-moz-placeholder',
               '-ms-input-placeholder';

@mixin placeholder {
  @each $placeholder in $placeholders {
    @if $placeholder == "-webkit-input-placeholder" {
      &::#{$placeholder} {
        @content;
      }
    }
    @else if $placeholder == "-moz-placeholder" {
      // FF 18-
      &:#{$placeholder} {
        @content;
      }

      // FF 19+
      &::#{$placeholder} {
        @content;
      }
    }
    @else {
      &:#{$placeholder} {
        @content;
      }
    }
  }
}

// Animation Mixin
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Writing animation properties and having them work everywhere
// WHY: Ensure compability. It's time-consuming to write cross-browser.
// USE: @include animation(fadedown 4s ease);
// REF: http://www.w3.org/TR/css3-animations/#the-animation-name-property-

// NOTE: Each of these mixins support comma separated lists of values, 
// which allows different transitions for individual properties 
// to be described in a single style rule. Each value in the list 
// corresponds to the value at that same position in the other properties.

// Official animation shorthand property.
@mixin animation ($animations...) {
  @include prefixer(animation, $animations, webkit moz spec);
}

// Individual Animation Properties
@mixin animation-name ($names...) {
  @include prefixer(animation-name, $names, webkit moz spec);
}


@mixin animation-duration ($times...) {
  @include prefixer(animation-duration, $times, webkit moz spec);
}


@mixin animation-timing-function ($motions...) {
// ease | linear | ease-in | ease-out | ease-in-out
  @include prefixer(animation-timing-function, $motions, webkit moz spec);
}


@mixin animation-iteration-count ($values...) {
// infinite | <number>
  @include prefixer(animation-iteration-count, $values, webkit moz spec);
}


@mixin animation-direction ($directions...) {
// normal | alternate
  @include prefixer(animation-direction, $directions, webkit moz spec);
}


@mixin animation-play-state ($states...) {
// running | paused
  @include prefixer(animation-play-state, $states, webkit moz spec);
}


@mixin animation-delay ($times...) {
  @include prefixer(animation-delay, $times, webkit moz spec);
}


@mixin animation-fill-mode ($modes...) {
// none | forwards | backwards | both
  @include prefixer(animation-fill-mode, $modes, webkit moz spec);
}

@mixin keyframes($name) {
  @-webkit-keyframes $name {
      @content;
  }
  @-moz-keyframes $name {
    @content;
  }
  @keyframes $name {
    @content;
  }
}


// Reverse Figure Caption Mixin
//
// This is being used in articles and galleries. - Ellen 6/26
//
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 
// Made to simply the code for gallery pages

@mixin caption($caption-style: reverse) {

  @if $caption-style == "reverse" {
    @include sans(em(12)/135%,600);
    padding: 5px 8px 6px;
    color: #fff;
    background-color: #000;
    > a {
      @include link(light);
    }
  }

  @if $caption-style == "light" {
    @include sans(em(12)/135%,500);
    text-align: right;
    padding: 6px 8px 0px;
    color: #999;
    background-color: #fff;
    > a {
      @include link;
    }
  }
}

// Dropcap Mixin
//
// This is only being referenced in the css for first gallery slides. I don't know if that is really being used anymore. - Ellen 6/26
//
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 
// Made to simply the code for gallery pages

@mixin dropcap  {
    @include sans(em(49, 16), 300);
    float: left;
    margin-right: 6px;
    padding-top: 18px;
    line-height: 28%;
    @include mq($article-sm) {
      font-size: em(58, 18);
      line-height: 35%;
    }
    @include mq(850px) {
      line-height: 43%;
      margin-right: 8px;
    }
}
// Social Icon Mixin
//
// this is being used for the horizonal social buttons in the toc and in the footer. - Ellen 6/26
//
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Including a set of social svgs and circle backgrounds
// WHY: It's verbose to write everytime in CSS
// USE: 

@mixin social-icon-list($button-color: $red, $button-txt-color: #fff, $button-shadow: none, $social-list-margin: 0) {
  .social-icon-list{
    position: relative;
    margin: $social-list-margin;
    height: 42px; 
    .social-icon{
      background-repeat: no-repeat;
      background-position: 50% 50%;
      //background-size: contain;
      width: 32px;
      height: 32px;
      @include button-state($button-color, $button-txt-color, $button-shadow);
      border-radius: 16px;
      position: absolute;
      top: 4px;     
      background-image: url('/img/social-cir-sprite.png');
      //specific icons
      &.twitter-icon {
        background-position: 0px 0px;
        left: 0px;
      }
      &.facebook-icon {
        background-position: 0px -33px;
        left: 43px;
      }
      &.google-icon {
        background-position: 0px -66px;
        left: 86px;
      }
      &.rss-icon {
        background-position: 0px -99px;
        left: 129px;
      }
      &.info-icon {
        background-position: 0px -132px;
        left: 129px;
      }
    }
  }
}

// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
// *** Source: _layout-base.scss
// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

/* !============================================= */

/* ! Media Grid                       */

/* !============================================= */
@mixin media-grid($num: 2, $pad: em(20), $class:media-block) {
  margin-left: -#{$pad};
  &:after {
    content: "";
    display: table;
    clear: both;
    *zoom: 1;
  }

  .#{$class} {
    float: left;
    padding-left: #{$pad};
    @if $num == 2 or $num == "two" {
      width: 50%;
      &:nth-child(2n+3) {
        clear: left;
      }
      &.n3 {
        clear:left;
      }
    }
    @if $num == 3 or $num == "three" {
      width: 33.3333%;
      &:nth-child(3n+4) {
        clear: left;
      }
      .ie7 & {
        width: 33%;
      }
      &.n4 {
        clear: left;
      }
    }
    @if $num == 4 or $num == "four" {
      width: 25%;
      &:nth-child(4n+5) {
        clear: left;
      }
      &.n5 {
        clear: left;
      }
    }
    @if $num == 5 or $num == "five" {
      &:nth-child(5n+6) {
        clear: left;
      }
      width: 20%;
      &.n6 {
        clear: left;
      }
    }
  }
} //media-grid

/* !============================================= */

/* ! Micro Layouts                    */

/* !============================================= */


// Art & Text Pairs
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Harmoniously placing art and text next to each other.
// Good for thumbnails/text and many other art/text situations
// WHY: It's a common pattern. It's easier to write this way.

// HTML:
// <article class="l-pair">
//  <div class="art-block">
//    <img class="art" src="#" />
//  </div> <!-- /art-block -->
//  <div class="txt-block">
//    <h1>Headline</h1>
//    <p>Paragraph paragraph paragraph paragraph</p>
//  </div> <!-- /txt-block -->
// </article> <!-- /l-pair -->

// USE: @include pair(100px, 30px);

@mixin pair($art-width: 50px, $art-margin: 20px, $v-align: middle, $direction: left) {
  $gutter: $art-width + $art-margin;
  &:after {
    content: "";
    display: table;
    clear: both;
    *zoom: 1;
  }

  @if $v-align == middle {
    display: table;

    > .art-bd {
      display: table-cell;
      width: $art-width;
      margin: 0;
      > .art {
        @include resp-img;
      }
    }
    > .txt-bd {
      display: table-cell;
      vertical-align: middle;
      padding-left: $art-margin;
    }

    // If lower than IE8, which has no
    // support for tables
    .lt-ie8 & {
      > .art-bd,
      > .txt-bd {
        display: block;
      }
      > .art-bd {
        width: $art-width;
        float: left;
      }
      > .txt-bd {
        margin-left: $gutter;
      }
    } // .lt-ie8
  } //middle

  @else {
    > .art-bd,
    > .txt-bd {
      display: block;

      &.quick-tz-bd {
        margin-left: 170px;
      }
      
    }
    > .art-bd {
      width: $art-width;
      @if $direction == right {
        float: right;
      } @else {
        float: left;
      }
      margin: 0;
      > .art {
        @include resp-img;
      }
    }
    > .txt-bd {
      @if $direction == right {
        margin-right: $gutter;
      } @else {
        margin-left: $gutter;
      }
    }
  }

} //pair


/* !============================================= */

/* ! Spacers                      */

/* !============================================= */

/* Variables & Mixins */

$spacer: 50px;
$spacer-small: round($spacer/5);
$spacer-med: round($spacer/2);
$spacer-large: round($spacer*1.5);


$spacer-top: inherit !default;
$spacer-bottom: inherit !default;

@mixin spacer($spacer-top, $spacer-bottom) {
  margin-top: $spacer-top;
  margin-bottom: $spacer-bottom;
}

// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
// *** Source: _loader.scss
// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

@mixin loading($time:1000s) {
  @include animation(page-fade $time ease);
  @include animation-fill-mode(forwards);
}

// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
// *** Source: _type.scss
// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

@mixin sans($size: em(14), $weight: 300, $style: normal, $ls: 0) {
  $weight-fallback: $weight;
  
  // If the weight is 400 or greater, the
  // fallback type should render as bold ...
  @if ($weight > 399) and ($weight < 699) {
    //$weight-fallback: bold;
  } 

  font: $style $weight-fallback #{$size} $sans-fallback;
  @if ($ls > 0) or ($ls < 0) {
    letter-spacing: $ls;
  }


  .fontface & {
    font-family: $sans;
    // Override the fallback weight with a more specific
    // weight declaration if necessary
    @if $weight-fallback == bold {
      //font-weight: $weight;
    } 


  }
}

// !-- Links ------------------------------------ //

// Your standard link style. Create more as needed
@mixin link($style: normal) {
  @if $style == normal {
    //color: $link;
    &:hover {
      text-decoration: underline;
    }
  }
  @if $style == light {
    //color: $link-lt;
    &:hover {
      text-decoration: underline;
    }
  }
  @if $style == secondary {
    color: $black-50;
    &:hover {
      text-decoration: underline;
    }
  }
  @if $style == hover {
    // Send no color style. 
    // Just deliver the hover state.
    &:hover {
      text-decoration: underline;
    }
  }
  @if $style == underline {
    // If style is underline, link is underlined 
    // by default and hovering removes the underline
    text-decoration: underline;
    &:hover {
      text-decoration: none;
    }
  }
}

.link {
  @include link;
  color: #2494e3;
}

// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
// *** Source: _teases.scss
// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

%quick-tz-layout {
  width: 100%;
  padding: 12px 8px;
  @include quick-border;
}

// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
// *** Source: _objects.scss
// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

//
// Number Box
//
// Used for Must Read list, numbers in list articles,
// and other spots where a large numeral is called for
// Ryan P 8.21
.number-box {
  // Number box
  @include sans (em(11)/155%, 800);
  @include size(19px);
  @include button-state($red);
  text-align: center;
}

//
// Content Fader
//
// This was used on trending(previously known as must reads) but is no longer used there or anywhere else as far as I can tell. - Ellen 6/25 
//
// Used to truncate long modules. Creates a transparent-to-white
// gradient that creates the appearance of a fadeout.  
// Ryan 8.21
@mixin content-fader($height: 35px, $position-top: n, $position-right: 0, $position-bottom: 0, $position-left: 0) {

  @if $position-top == 'top' {
    $position-top: 0;
    $position-bottom: n;
  }

  @if $position-top == 'bottom' {
    $position-top: n;
    $position-bottom: 0;
  }

  pointer-events: none;
  @include content;
  @include absolute($position-top $position-right $position-bottom $position-left);
    display: block;
  height: $height;
  background-image: linear-gradient(top, rgba(245, 248, 243, 0), #fff); 
}

// Hover Box Mixin
//
// This is only used here for the class .has-hover and in _comments.scss for .has-voted.comment-vote-mod as far as I can tell - Ellen 6/25
//
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Applying a tool tip on hover 
// WHY: So the style can be controlled in one place
// USE: @include hover();

@mixin hover-box ($hover-direction: top, $class: ".hover-info", $width: 175px) {

  #{$class} {
    width: $width;
    @if $class != ".hover-info" {
      // TODO: @extend .hover-info not working... but why?
      display: none;
      z-index: 1;
      position: absolute;
      @include sans(em(12), 400);
      line-height: 16px;
      padding: 8px;
      color: #ffffff;
      background: rgba(0, 0, 0, 0.90) ;
      border-radius: 2px;
      & > a {
        color: $blue-lt;
      }
    } // if != hover-info
  }

  // When hovering on parent, 
  // show child hover-box
  &:hover {
    #{$class} {
      display: block;
      &:after {
        @include content;
        position: absolute;
          width: 0;
          height: 0;
          @include trans;
      }
    }   
  } // hover

  @if $hover-direction == "left" {
    #{$class}{
    right: 100%;
    top: -13px;
    margin-right: 8px; //used to make room for the triangle;
      &:after {
        @include triangle(right, 12px, rgba(0, 0, 0, 0.90), .8);
          top: 16px;
          right: -12px;
      }
    }
  } // left

  @if $hover-direction == "right" {
    #{$class}{
    left: 100%;
    top: -13px;
    margin-left: 8px; //used to make room for the triangle;
      &:after {
        @include triangle(left, 12px, rgba(0, 0, 0, 0.90), .8);
          top: 16px;
          right: 175px;
      }
    }
  } // right

  @if $hover-direction == "top" {
    #{$class}{
    text-align:center;
    right: -77px;
    bottom: 100%;
    margin-bottom: 5px; //used to make room for the triangle;
      &:after {
        @include triangle(down, 8px, rgba(0, 0, 0, 0.90), .8);
          bottom: -8px;
          right: 50%;
          margin-right: -4px;
      }
    }
  } // top

  @if $hover-direction == "bottom" {
    #{$class}{
    right: -77px;
    top: 100%;
    margin-top: 12px; //used to make room for the triangle;
      &:after {
        @include triangle(up, 12px, rgba(0, 0, 0, 0.90), .8);
          top: -12px;
          right: 80px;
      }
    }
  } // bottom
}

// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
// *** Source: _buttons.scss
// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

.btn-strong {
  @include sans(em(10), 600, normal, 1px);
  text-transform: uppercase;
  @include button-state;
}

.btn-medium {
  padding: 7px 15px 9px;
  display: inline-block;
}

// Default Button Style
.btn {
  @extend .btn-strong;
  @extend .btn-medium;
}

// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
// *** Source: _.scss
// * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =